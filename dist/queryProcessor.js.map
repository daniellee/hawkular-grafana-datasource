{"version":3,"sources":["../src/queryProcessor.js"],"names":["QueryProcessor","q","backendSrv","variables","capabilities","url","baseHeaders","target","options","then","postData","start","range","from","valueOf","end","to","order","multipleMetrics","queryBy","metricIds","resolve","caps","QUERY_POST_ENDPOINTS","seriesAggFn","ids","rawQuery","timeAggFn","singleStatLiveQuery","limit","metrics","singleStatQuery","rawQueryLegacy","tags","length","when","hawkularFormatTags","map","value","tag","join","name","uri","type","rate","datasourceRequest","data","method","headers","processRawResponse","response","status","all","encodeURIComponent","metric","replace","params","processRawResponseLegacy","refId","timeSerie","id","datapoints","point","timestamp","_","sortedData","sort","p1","p2","chain","zip","slice","filter","pair","point1","point2","value_diff","time_diff","fnBucket","bucket","avg","min","max","buckets","stacked","processSingleStatResponse","Date","now","processSingleStatLiveResponse","reduceFunc","presentValues","reduce","a","b","latestPoints","timeSeries","dp"],"mappings":"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","file":"queryProcessor.js","sourcesContent":["export class QueryProcessor {\n\n  constructor(q, backendSrv, variables, capabilities, url, baseHeaders) {\n    this.q = q;\n    this.backendSrv = backendSrv;\n    this.variables = variables;\n    this.capabilities = capabilities;\n    this.url = url;\n    this.baseHeaders = baseHeaders;\n  }\n\n  run(target, options) {\n    return this.capabilities.then(caps => {\n      var postData = {\n        start: options.range.from.valueOf(),\n        end: options.range.to.valueOf(),\n        order: 'ASC'\n      };\n      var multipleMetrics = true;\n      if (target.queryBy === 'ids') {\n        let metricIds = this.variables.resolve(target.target, options);\n        if (caps.QUERY_POST_ENDPOINTS) {\n          if (!target.seriesAggFn || target.seriesAggFn === 'none') {\n            postData.ids = metricIds;\n            return this.rawQuery(target, postData);\n          } else if (target.timeAggFn == 'live') {\n            // Need to change postData\n            return this.singleStatLiveQuery(target, {ids: metricIds, limit: 1});\n          } else {\n            // Need to perform multiple series aggregation\n            postData.metrics = metricIds;\n            return this.singleStatQuery(target, postData);\n          }\n        } else {\n          return this.rawQueryLegacy(target, options.range, metricIds);\n        }\n      } else {\n        if (target.tags.length === 0) {\n          return this.q.when([]);\n        }\n        postData.tags = this.hawkularFormatTags(target.tags, options);\n        if (!target.seriesAggFn || target.seriesAggFn === 'none') {\n          return this.rawQuery(target, postData);\n        } else if (target.timeAggFn == 'live') {\n          // Need to change postData\n          return this.singleStatLiveQuery(target, {tags: postData.tags, limit: 1});\n        } else {\n          // Need to perform multiple series aggregation\n          return this.singleStatQuery(target, postData);\n        }\n      }\n    });\n  }\n\n  hawkularFormatTags(tags, options) {\n    return tags.map(tag => {\n      var value;\n      if (tag.value === ' *') {\n        // '*' character get a special treatment in grafana so we had to use ' *' instead\n        value = '*';\n      } else {\n        value = this.variables.resolve(tag.value, options).join('|');\n      }\n      return tag.name + ':' + value;\n    }).join(',');\n  }\n\n  rawQuery(target, postData) {\n    let uri = [\n      target.type + 's',            // gauges or counters\n      target.rate ? 'rate' : 'raw', // raw or rate\n      'query'\n    ];\n    let url = this.url + '/' + uri.join('/');\n\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      data: postData,\n      method: 'POST',\n      headers: this.baseHeaders\n    }).then(response => this.processRawResponse(target, response.status == 200 ? response.data : []));\n  }\n\n  rawQueryLegacy(target, range, metricIds) {\n    return this.q.all(metricIds.map(metric => {\n      let uri = [\n        target.type + 's',            // gauges or counters\n        encodeURIComponent(metric).replace('+', '%20'), // metric name\n        'data'];\n      let url = this.url + '/' + uri.join('/');\n\n      return this.backendSrv.datasourceRequest({\n        url: url,\n        params: {\n          start: range.from.valueOf(),\n          end: range.to.valueOf()\n        },\n        method: 'GET',\n        headers: this.baseHeaders\n      }).then(response => this.processRawResponseLegacy(target, metric, response.status == 200 ? response.data : []));\n    }));\n  }\n\n  processRawResponse(target, data) {\n    return data.map(timeSerie => {\n      return {\n        refId: target.refId,\n        target: timeSerie.id,\n        datapoints: timeSerie.data.map(point => [point.value, point.timestamp])\n      };\n    });\n  }\n\n  processRawResponseLegacy(target, metric, data) {\n    var datapoints;\n    if (!target.rate) {\n      datapoints = _.map(data, point => [point.value, point.timestamp]);\n    } else {\n      var sortedData = data.sort((p1, p2)=> p1.timestamp - p2.timestamp);\n      datapoints = _.chain(sortedData)\n        .zip(sortedData.slice(1))\n        .filter(pair => {\n          return pair[1] // Exclude the last pair\n            && (target.type == 'gauge' || pair[0].value <= pair[1].value); // Exclude counter resets\n        })\n        .map(pair => {\n          var point1 = pair[0], point2 = pair[1];\n          var timestamp = point2.timestamp;\n          var value_diff = point2.value - point1.value;\n          var time_diff = point2.timestamp - point1.timestamp;\n          var rate = 60000 * value_diff / time_diff;\n          return [rate, timestamp];\n        })\n        .value();\n    }\n    return {\n      refId: target.refId,\n      target: metric,\n      datapoints: datapoints\n    };\n  }\n\n  singleStatQuery(target, postData) {\n    // Query for singlestat => we just ask for a single bucket\n    // But because of that we need to override Grafana behaviour, and manage ourselves the min/max/avg/etc. selection\n    var fnBucket;\n    if (target.timeAggFn == 'avg') {\n      fnBucket = bucket => bucket.avg;\n    } else if (target.timeAggFn == 'min') {\n      fnBucket = bucket => bucket.min;\n    } else if (target.timeAggFn == 'max') {\n      fnBucket = bucket => bucket.max;\n    } // no else case. \"live\" case was handled before\n    let url = this.url + '/' + target.type + 's/stats/query';\n    delete postData.order;\n    postData.buckets = 1;\n    postData.stacked = target.seriesAggFn === 'sum';\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      data: postData,\n      method: 'POST',\n      headers: this.baseHeaders\n    }).then(response => this.processSingleStatResponse(target, fnBucket, response.status == 200 ? response.data : []));\n  }\n\n  processSingleStatResponse(target, fnBucket, data) {\n    return data.map(bucket => {\n      return {\n        refId: target.refId,\n        target: \"Aggregate\",\n        datapoints: [[fnBucket(bucket), bucket.start]]\n      };\n    });\n  }\n\n  singleStatLiveQuery(target, postData) {\n    let uri = [\n      target.type + 's',            // gauges or counters\n      target.rate ? 'rate' : 'raw', // raw or rate\n      'query'\n    ];\n    let url = this.url + '/' + uri.join('/');\n    // Set start to now - 5m\n    postData.start = Date.now() - 300000;\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      data: postData,\n      method: 'POST',\n      headers: this.baseHeaders\n    }).then(response => this.processSingleStatLiveResponse(target, response.status == 200 ? response.data : []));\n  }\n\n  processSingleStatLiveResponse(target, data) {\n    var reduceFunc;\n    if (target.seriesAggFn === 'sum') {\n      reduceFunc = (presentValues => presentValues.reduce((a,b) => a+b));\n    } else {\n      reduceFunc = (presentValues => presentValues.reduce((a,b) => a+b) / presentValues.length);\n    }\n    var datapoints;\n    let latestPoints = data.filter(timeSeries => timeSeries.data.length > 0)\n        .map(timeSeries => timeSeries.data[0]);\n    if (latestPoints.length === 0) {\n      datapoints = [];\n    } else {\n      datapoints = [reduceFunc(latestPoints.map(dp => dp.value)), latestPoints[0].timestamp];\n    }\n    return [{\n      refId: target.refId,\n      target: \"Aggregate\",\n      datapoints: [datapoints]\n    }];\n  }\n}\n"]}